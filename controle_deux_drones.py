"""
Contr√¥le simultan√© de deux drones :
- DJI Tello (via WiFi)
- Parrot Mambo (via Bluetooth BLE)

Synchronisation des mouvements pour d√©monstrations coordonn√©es
"""

import asyncio
from djitellopy import Tello
from bleak import BleakClient, BleakScanner
import struct
import time
import signal
import sys
import threading

# ============================================================
#                    CLASSE MAMBO CONTROLLER
# ============================================================

class MamboController:
    """Contr√¥leur pour le drone Parrot Mambo (BLE)"""
    
    CHAR_SEND_NOACK = "9a66fa0a-0800-9191-11e4-012d1540cb8e"
    CHAR_SEND_ACK = "9a66fa0b-0800-9191-11e4-012d1540cb8e"
    CHAR_RECV_NOACK = "9a66fb0f-0800-9191-11e4-012d1540cb8e"
    CHAR_RECV_ACK = "9a66fb0e-0800-9191-11e4-012d1540cb8e"
    
    def __init__(self, address=None):
        self.address = address
        self.client = None
        self.sequence_ack = 0
        self.sequence_noack = 0
        self.connected = False
        self.pcmd_task = None
        
        self.roll = 0
        self.pitch = 0
        self.yaw = 0
        self.gaz = 0
        self.flag = 0
        
        self.battery = 0
        self.flying_state = "unknown"
        self.debug_mode = False
    
    async def find_mambo(self):
        """Recherche un Mambo √† proximit√©"""
        print("üîç [MAMBO] Recherche...")
        devices = await BleakScanner.discover(timeout=5.0)
        
        for device in devices:
            if device.name and "Mambo" in device.name:
                print(f"‚úì [MAMBO] Trouv√©: {device.name} ({device.address})")
                return device.address
        
        print("‚úó [MAMBO] Non trouv√©")
        return None
    
    def _decode_state(self, data):
        """D√©code les messages d'√©tat"""
        if len(data) < 6:
            return
        
        project = data[2]
        class_id = data[3]
        cmd = struct.unpack('<H', data[4:6])[0]
        
        if project == 2 and class_id == 3 and cmd == 1 and len(data) >= 8:
            state_id = struct.unpack('<I', data[6:10])[0]
            states = ["landed", "takingoff", "hovering", "flying", "landing", "emergency"]
            self.flying_state = states[state_id] if state_id < len(states) else f"unknown({state_id})"
            print(f"‚úàÔ∏è  [MAMBO] √âtat: {self.flying_state}")
        
        elif project == 0 and class_id == 5 and cmd == 1 and len(data) >= 7:
            self.battery = data[6]
            print(f"üîã [MAMBO] Batterie: {self.battery}%")
    
    def _notification_handler_ack(self, sender, data):
        self._decode_state(data)
    
    def _notification_handler_noack(self, sender, data):
        pass
    
    async def _pcmd_loop(self):
        """Boucle PCMD pour maintenir la connexion"""
        while self.connected and self.client and self.client.is_connected:
            try:
                timestamp = int(time.time() * 1000) % (2**32)
                
                data = struct.pack('<BbbbbI',
                                  self.flag,
                                  self.roll,
                                  self.pitch,
                                  self.yaw,
                                  self.gaz,
                                  timestamp)
                
                payload = struct.pack('<BBH', 2, 0, 2) + data
                frame = struct.pack('<BB', 2, self.sequence_noack) + payload
                
                await self.client.write_gatt_char(self.CHAR_SEND_NOACK, frame, response=False)
                self.sequence_noack = (self.sequence_noack + 1) % 256
                
                await asyncio.sleep(0.05)
            except Exception as e:
                if self.debug_mode:
                    print(f"‚ö†Ô∏è  [MAMBO] Erreur PCMD: {e}")
                break
    
    async def _send_command(self, project, class_id, cmd, data=b''):
        """Envoie une commande avec ACK"""
        payload = struct.pack('<BBH', project, class_id, cmd) + data
        frame = struct.pack('<BB', 2, self.sequence_ack) + payload
        
        await self.client.write_gatt_char(self.CHAR_SEND_ACK, frame, response=False)
        self.sequence_ack = (self.sequence_ack + 1) % 256
        await asyncio.sleep(0.1)
    
    async def connect(self):
        """Connexion au Mambo"""
        if not self.address:
            self.address = await self.find_mambo()
            if not self.address:
                return False
        
        print(f"üì° [MAMBO] Connexion √† {self.address}...")
        await asyncio.sleep(2)
        
        self.client = BleakClient(self.address, timeout=30.0)
        
        try:
            await self.client.connect()
            print("‚úì [MAMBO] Connect√©!")
            
            await self.client.start_notify(self.CHAR_RECV_ACK, self._notification_handler_ack)
            await self.client.start_notify(self.CHAR_RECV_NOACK, self._notification_handler_noack)
            
            self.connected = True
            self.pcmd_task = asyncio.create_task(self._pcmd_loop())
            
            await asyncio.sleep(1)
            
            # Initialisation
            datetime_str = time.strftime("%Y-%m-%dT%H:%M:%S+0000")
            data = datetime_str.encode('utf-8') + b'\x00'
            await self._send_command(0, 4, 1, data)
            await self._send_command(0, 4, 0)
            
            await asyncio.sleep(1)
            print("‚úì [MAMBO] Pr√™t!")
            return True
            
        except Exception as e:
            print(f"‚úó [MAMBO] Erreur: {e}")
            return False
    
    async def disconnect(self):
        """D√©connexion"""
        self.connected = False
        
        if self.pcmd_task:
            self.pcmd_task.cancel()
            try:
                await self.pcmd_task
            except asyncio.CancelledError:
                pass
        
        if self.client and self.client.is_connected:
            await self.client.disconnect()
        
        print("üì¥ [MAMBO] D√©connect√©")
    
    async def flat_trim(self):
        """Calibration"""
        print("üéØ [MAMBO] Calibration...")
        await self._send_command(2, 0, 0)
    
    async def takeoff(self):
        """D√©collage"""
        print("üöÅ [MAMBO] D√©collage...")
        await self._send_command(2, 0, 1)
    
    async def land(self):
        """Atterrissage"""
        print("üõ¨ [MAMBO] Atterrissage...")
        await self._send_command(2, 0, 3)
    
    def move(self, roll=0, pitch=0, yaw=0, gaz=0):
        """D√©placement"""
        self.flag = 1 if any([roll, pitch, yaw, gaz]) else 0
        self.roll = max(-100, min(100, roll))
        self.pitch = max(-100, min(100, pitch))
        self.yaw = max(-100, min(100, yaw))
        self.gaz = max(-100, min(100, gaz))
    
    def hover(self):
        """Hover (arr√™t)"""
        self.flag = 0
        self.roll = 0
        self.pitch = 0
        self.yaw = 0
        self.gaz = 0


# ============================================================
#                    CONTR√îLEUR DUAL
# ============================================================

class DualDroneController:
    """Contr√¥le simultan√© Tello + Mambo"""
    
    def __init__(self):
        self.tello = None
        self.mambo = None
        self.running = True
        
        # Compensation de d√©rive Tello
        self.tello_compensation_roll = -10  # Gauche
        self.tello_compensation_pitch = -10  # Arri√®re
    
    def emergency_stop(self, sig=None, frame=None):
        """Arr√™t d'urgence des deux drones"""
        print("\n\nüö® ARR√äT D'URGENCE - LES DEUX DRONES üö®\n")
        self.running = False
        
        # Tello
        if self.tello:
            try:
                self.tello.land()
                print("‚úì [TELLO] Atterri")
            except:
                print("‚úó [TELLO] Erreur atterrissage")
        
        sys.exit(0)
    
    async def init_tello(self):
        """Initialise le Tello"""
        print("\n" + "=" * 60)
        print("INITIALISATION TELLO")
        print("=" * 60)
        
        self.tello = Tello()
        
        try:
            print("üì° [TELLO] Connexion...")
            self.tello.connect()
            battery = self.tello.get_battery()
            print(f"‚úì [TELLO] Connect√© - Batterie: {battery}%")
            
            if battery < 20:
                print("‚ö†Ô∏è  [TELLO] Batterie faible!")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚úó [TELLO] Erreur: {e}")
            return False
    
    async def init_mambo(self):
        """Initialise le Mambo"""
        print("\n" + "=" * 60)
        print("INITIALISATION MAMBO")
        print("=" * 60)
        
        self.mambo = MamboController()
        return await self.mambo.connect()
    
    async def stabilize_tello(self, duration):
        """Stabilise le Tello avec compensation de d√©rive"""
        start = time.time()
        while time.time() - start < duration and self.running:
            try:
                self.tello.send_rc_control(
                    self.tello_compensation_roll,
                    self.tello_compensation_pitch,
                    0, 0
                )
                await asyncio.sleep(0.05)
            except:
                break
    
    async def demo_simple(self):
        """D√©monstration simple : d√©collage synchronis√©"""
        print("\n" + "=" * 60)
        print("D√âMONSTRATION : D√âCOLLAGE SYNCHRONIS√â")
        print("=" * 60)
        print("\n‚ö†Ô∏è  Les deux drones vont d√©coller en m√™me temps")
        print("‚ö†Ô∏è  Puis rester en vol 5 secondes")
        print("‚ö†Ô∏è  Puis atterrir ensemble\n")
        
        input("‚û§ Appuyez sur ENTR√âE pour d√©marrer...")
        
        try:
            # Calibration Mambo
            await self.mambo.flat_trim()
            await asyncio.sleep(2)
            
            # D√©collage synchronis√©
            print("\nüöÅ D√âCOLLAGE SYNCHRONIS√â!")
            print("=" * 60)
            
            # Lancer les deux d√©collages en parall√®le
            tello_task = asyncio.create_task(asyncio.to_thread(self.tello.takeoff))
            mambo_task = asyncio.create_task(self.mambo.takeoff())
            
            await asyncio.gather(tello_task, mambo_task)
            
            print("‚úì Les deux drones sont en vol!")
            await asyncio.sleep(2)
            
            # Vol stabilis√© 5 secondes
            print("\nüîÑ STABILISATION 5 SECONDES")
            print("=" * 60)
            
            stabilize_task = asyncio.create_task(self.stabilize_tello(5))
            
            for i in range(5, 0, -1):
                print(f"   {i}s...")
                await asyncio.sleep(1)
            
            await stabilize_task
            self.mambo.hover()
            
            print("\n‚úì Stabilisation termin√©e")
            
            # Atterrissage synchronis√©
            print("\nüõ¨ ATTERRISSAGE SYNCHRONIS√â")
            print("=" * 60)
            
            tello_land_task = asyncio.create_task(asyncio.to_thread(self.tello.land))
            mambo_land_task = asyncio.create_task(self.mambo.land())
            
            await asyncio.gather(tello_land_task, mambo_land_task)
            
            print("‚úì Les deux drones ont atterri!")
            await asyncio.sleep(3)
            
        except KeyboardInterrupt:
            print("\nüö® Interruption utilisateur")
        except Exception as e:
            print(f"\n‚úó Erreur: {e}")
    
    async def demo_carre_synchronise(self):
        """Les deux drones volent en carr√© en m√™me temps"""
        print("\n" + "=" * 60)
        print("D√âMONSTRATION : CARR√â SYNCHRONIS√â")
        print("=" * 60)
        print("\n‚ö†Ô∏è  Les deux drones vont voler en carr√© simultan√©ment")
        print("‚ö†Ô∏è  Espace requis: 3m x 3m pour chaque drone")
        print("‚ö†Ô∏è  Placez les drones √† 2m l'un de l'autre\n")
        
        input("‚û§ Appuyez sur ENTR√âE pour d√©marrer...")
        
        try:
            # Calibration et d√©collage
            await self.mambo.flat_trim()
            await asyncio.sleep(2)
            
            print("\nüöÅ D√âCOLLAGE")
            tello_task = asyncio.create_task(asyncio.to_thread(self.tello.takeoff))
            mambo_task = asyncio.create_task(self.mambo.takeoff())
            await asyncio.gather(tello_task, mambo_task)
            
            print("‚úì Drones en vol!")
            await asyncio.sleep(2)
            
            # Carr√© synchronis√© (4 c√¥t√©s)
            print("\nüî≤ VOL EN CARR√â SYNCHRONIS√â")
            print("=" * 60)
            
            for i in range(4):
                print(f"\n‚Üí C√¥t√© {i+1}/4")
                
                # Avancer (Tello + Mambo)
                print("   Avance...")
                self.mambo.move(pitch=40)
                
                # Tello avance avec compensation
                tello_forward = asyncio.create_task(asyncio.to_thread(
                    self.tello.move_forward, 50
                ))
                
                # Stabilisation Mambo
                await asyncio.sleep(2)
                await tello_forward
                
                self.mambo.hover()
                await asyncio.sleep(1)
                
                # Rotation 90¬∞ (les deux)
                print("   Rotation 90¬∞...")
                self.mambo.move(yaw=60)
                
                tello_rotate = asyncio.create_task(asyncio.to_thread(
                    self.tello.rotate_clockwise, 90
                ))
                
                await asyncio.sleep(1.5)
                await tello_rotate
                
                self.mambo.hover()
                
                # Stabilisation Tello
                stabilize_task = asyncio.create_task(self.stabilize_tello(1))
                await asyncio.sleep(1)
                await stabilize_task
            
            print("\n‚úì Carr√© termin√©!")
            
            # Atterrissage
            print("\nüõ¨ ATTERRISSAGE")
            tello_land = asyncio.create_task(asyncio.to_thread(self.tello.land))
            mambo_land = asyncio.create_task(self.mambo.land())
            await asyncio.gather(tello_land, mambo_land)
            
            print("‚úì Les deux drones ont atterri!")
            await asyncio.sleep(3)
            
        except KeyboardInterrupt:
            print("\nüö® Interruption")
        except Exception as e:
            print(f"\n‚úó Erreur: {e}")
    
    async def run(self):
        """Lance le contr√¥leur dual"""
        # Configuration signal d'urgence
        signal.signal(signal.SIGINT, self.emergency_stop)
        
        print("=" * 60)
        print("    CONTR√îLE DUAL : TELLO + MAMBO")
        print("=" * 60)
        
        try:
            # Initialisation des deux drones
            tello_ok = await self.init_tello()
            mambo_ok = await self.init_mambo()
            
            if not tello_ok or not mambo_ok:
                print("\n‚úó √âchec de l'initialisation")
                return
            
            print("\n‚úì Les deux drones sont pr√™ts!")
            
            # Menu de d√©monstrations
            print("\n" + "=" * 60)
            print("D√âMONSTRATIONS DISPONIBLES")
            print("=" * 60)
            print("1. D√©collage synchronis√© + 5s + Atterrissage")
            print("2. Vol en carr√© synchronis√©")
            print("\n")
            
            mode = input("Choisir (1-2): ").strip()
            
            if mode == "1":
                await self.demo_simple()
            elif mode == "2":
                await self.demo_carre_synchronise()
            else:
                print("‚ùå Mode invalide")
            
        except Exception as e:
            print(f"\n‚úó Erreur globale: {e}")
        
        finally:
            # Nettoyage
            print("\nüì¥ D√©connexion des drones...")
            if self.mambo:
                await self.mambo.disconnect()
            print("‚úì Programme termin√©")


# ============================================================
#                         MAIN
# ============================================================

async def main():
    controller = DualDroneController()
    await controller.run()


if __name__ == "__main__":
    print("\n" + "=" * 60)
    print("    üöÅ CONTR√îLE SIMULTAN√â TELLO + MAMBO üöÅ")
    print("=" * 60)
    print("\n‚ö†Ô∏è  IMPORTANT:")
    print("  ‚Ä¢ Tello doit √™tre connect√© en WiFi (TELLO-XXXXXX)")
    print("  ‚Ä¢ Mambo doit √™tre allum√© et √† proximit√© (Bluetooth)")
    print("  ‚Ä¢ Placez les drones √† 2m l'un de l'autre")
    print("  ‚Ä¢ Espace requis: 3m x 3m minimum")
    print("  ‚Ä¢ Ctrl+C = Arr√™t d'urgence des DEUX drones")
    print("\n")
    
    asyncio.run(main())